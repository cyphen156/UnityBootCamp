25.04.28
Data Structure / Algorithms
#1 Lecture
트리의 균형도
데이터가 저장될때 리프 노드의 Level 격차가 편향되는 것을 균일하지 않다고 부른다.
-> 데이터 검색이 힘들어진다.

Heap 
이진 검색 트리
부모를 기준으로 좌우 분할 / 작은것, 큰것

완전 이진 트리  PriorityQueue<Value, Acc>
마지막 레벨을 제외하면 모든 노드가 항상 가득 차 있다.
최대 최소 원소에 항상 바로 접근 가능해야 한다
-> 루트에 존재한다.

이거는 배열로 구현할까 노드로 구현할까?
항상 정렬 된다.
배열로 구현한다 -> Queue라는 뜻이다.


#2 Lecture

ADT :: 추상 자료형

→ SET, MAP, HASH-Table
HASH의 성질
결정적이다 -> 같은 입력 데이터를 집어넣으면 항상 같은 값이 도출되어야 한다.
균일성 -> 충돌 방지
효율성 ->해시 계산이 빠르고, 해시테이블 접근이 빠르게 이루어져야 한다.

seperate chain


다익스트라 알고리즘
최단경로 계산하기
// 모든 정점에 대한 최단거리를 전부 구한다

A* 알고리즘
다익스트라를 현실에 맞게 일정 부분 덜어낸 알고리즘
→ 휴리스틱 접근법

지나쳐온 경로를 저장한다
→ [0][4][1][2][0][0][4]


25.04.29
Data Structure / Algorithms
#1 Lecture

ReView
컴퓨터란 무엇인가?

연산기, 저장소, 입출력

그러면 프로그래밍은 무엇인가?
Data를 조작하는 것

그럼 데이터를 컴퓨터는 어떻게 사용하는가?
0과 1의 이진 논리 == Bit

그럼 컴퓨터로 사람이 할 수 있는 것은 있다/없다 밖에 없는가?
No → 비트를 묶어서 약속을 통해 컴퓨터에게 해석방법을 다르게 할 수 있다.
Literal 문자, 문자열, 정수

대표 CPU Register
MBR	Mem Buff Regist
MAR	Mem Addr Regist
SCR	Stack Controll Regist
음 ALU는 연산기고 그 안에 AC 레지스터가 있구나?

Compile VS InterPret = 완성본 만들기 VS 한줄씩 해석하기
왜 배웠을 까? ⇒ 프로그램을 실행하고 있을 때 결과를 예측할 수 있는가? 동적으로 변하는가?

변수의 추상화
주소 ⇒ 이름
크기 ⇒ 자료형

분할 정복 :: 큰 덩어리를 잘게 쪼개서 해결하다 보면 전부 해결될거다.

Recursive Vs Stored Data(<--나는 동적 프로그래밍이라는 명칭이 싫다. 이거 동적이지 않음)
	         (Memoization)
추가 메모리를 사용해서 반복 호출오버헤드를 줄이겟다. 


알고리즘의 분석	::	시간복잡도와 공간복잡도

자료구조		::	데이터를 조직(하나로 묶는)하는 방법
Why?? 내가 원하는 대로 데이터를 조작하려고
선형		/	비선형
List, Stack, Queue	Graph, Tree



그래프 :: 관계 특화 자료구조
트리
계층 자료 구조
Root - Node
Level - Nodes(Degree)
Leaf - Node

이진 트리를 만들 수는 있는데, 균형잡힌걸 만드는게 힘듬
→ 리프 노드가 한쪽으로 편향 될 수 있음

값 타입과 참조 타입의 차이점

스택과 힙에 구성된다
값은 널이 허용되지 않음
참조는 널이 허용됨


this 키워드는 메서드가 호출될 때마다 생성되고 초기화되어 파괴된다


SET 원소를 유일하게 저장하는 추상자료형

MAP KEY - VALUE

HASH

배열을 통해
이진검색트리
TABLE 



25.04.30
Unity6 Deep
#1 Lecture
Basic Network

네트워크와 게임

메인프레임을 통해 서로가 직접 연결
MUD 텍스트 기반 멀티 플레이. (Multi User Dungeon)
LAN 
InterNetwork(온라인)
문제점
Latency(네트워크 지연) : 물리적 한계점
임시 방편 : 연출을 통한 눈속임(Masking)
명령을 내렸을 때 사운드, 이펙트 등을 통해 
사용자는 명령이 즉각 반응 했다고 착각하게됨

네트워크 토폴로지
Client - Server : 권한 집중형 데디케이트 서버
하마치 서버 : 리스닝서버

실험적 시도가 있었던 게임 Dedicate + Listening
사이퍼즈 :	데디케이트 서버 - 게임룸 생성
게임스타트 - 리스닝서버 생성 -> 클라이언트에게 호스트 전가
→ 클라이언트의 컴퓨터 성능에 의해 게임 로직이 좌지우지됨
⇒ 기대했던 성능 상승보다 오히려 역효과가 발생
결국 다시 데디케이트 Only로 전환됨

조금 더 부연설명하자면 당시 네오플의 서버 컴퓨터가 서울에서 제주도로 이전됨
→ 물리적 거리가 늘어났음
→ 네트워크 성능 자체도 아직 기가비트가 아닌 100Mbps단위
→ 서버에 부하가 많았던 상황
클라이언트끼리만 통신하면 어떨까?

이전의 네트워킹 처리방식은
Client - Server - Client 의 중개 처리방식
client - client 구조로 가게되면 서버의 처리 로직이 사라지기때문에 위치렉 등
	네트워크 레이턴시 개선을 기대했었음

그런데 
Client의 성능이 너무 안좋음 
당시 그래픽카드? 
없었음
CPU? 라이젠 조차 존재하지 않던 시절
클라이언트의 물리적 성능 자체가 네트워크를 고려하지 않아도 될 정도로
	너무 안좋았음
→ 클라이언트는 렌더링하는것 만으로도 벅차!

Neople Cyphers 2015-05 : 네트워크 개선 - 파워 싱크 프로젝트 Magagine
https://cyphers.nexon.com/article/magazine/topic/19093856



#2 Lecture 
인터넷
상호 연결된 네트워크
통신 약속 Protocol

OSI 7Layer 그냥 그런거 있다.
계층은 자기자신끼리만 이해가능한다. 
실제 데이터 통신은 하위 레이어를 지나 같은 레이어 까지 도달한다 하더라도 레이어간 데이터 압축을 통해 새로운 원본을 만들어 보존 통신
Physical		-	Network Access
DataLink		-	
Network		-	InterNetwork
TransPort		- 	TransPort
(Process에게 어떻게 줄거냐?  – Pid 찾아내기 :: Port)
연결/비연결 전송
Session		-	이하 Application으로 통일
프로세스간 논리적 연결
Presentation	
데이터를 어떻게 보낼 것인가? 
Encoding Rule / Capsulation / Protectable
Application
어떤 데이터를 어떻게 써먹을 것인가?


#3 Lecture

Extra
Frame Work
	효율적인 개발, 생산성 향상을 위해 특정 프로그램을 만들기 위해 필요한/자주
	사용되는기능들을 미리 만들어 제공하는것… 일종의 개발 툴킷

→ Awake - OnEnable - OnStart
Awake
맨 처음 생성되었을 때 나 자신(내부 변수)이 들고있어야 하는 필수 요소들 초기화

OnEnable
껏다 켜졋다 할 때 재 초기화 되어야 할 Reset의 역할

OnStart
렌더링 되기 전에 초기화
외부와 연결되어 있어야 하는 변수들 초기화 (OnEnable에서 가능하지만 엄격하게 구분하기 위해 나는 Start에서 초기화함)
# 용어
- 인터넷(Internet)
    - 상호 연결된 네트워크(Inter-connected Network)
- 프로토콜(Protocol)
    - 통신 규약
- 링크(Link)
    - 경로를 구성하는 노드(네트워크 장비)
- 세션(Session)
    - 정해진 프로세스끼리만 통신하는 가상의 채널 


# 요약
- 네트워크 모델은 여러 계층으로 구분되어 있다.
    - 각 계층은 자신만의 역할이 있으며 서로 영향을 주지 않는다.
- OSI 7계층
    - 1 : 물리 계층(Physical Layer)
        - 비트를 어떤 물리적 매체(전기, 공기, 빛 등)를 이용해서 보낼 것인가?
        - UTP 케이블, 광케이블, T1 등이 있다.
    - 2 : 데이터 링크 계층(Data Link Layer)
        - 링크 간 통신을 어떻게 할 것인가?
        - 링크 간 구분은 MAC 주소를 사용한다.
        - 오류 제어, 흐름 제어, 접근 제어를 수행한다.
    - 3 : 네트워크 계층(Network Layer)
        - 어떻게 상대방 컴퓨터에 데이터를 보낼 것인가?
        - 컴퓨터 구분은 IP 주소를 사용한다.
    - 4 : 전송 계층(Transport Layer)
        - 어떻게 특정 프로세스에 데이터를 보낼 것인가?
        - 컴퓨터 내 프로세스 구분은 포트 번호를 사용한다.
        - 세션을 연결하는 TCP, 세션을 연결하지 않는 UDP가 있다.
            - TCP는 신뢰성 있는 통신을 위해 오류 제어, 흐름 제어, 혼잡 제어를 수행한다.
    - 5 : 세션 계층(Session Layer)
        - 세션 시작, 관리, 종료를 수행한다.
    - 6 : 표현 계층(Presentation Layer)
        - 데이터를 어떻게 보낼 것인가?
    - 7 :응용 계층(Application Layer)
        - 응용 프로그램끼리 어떻게 통신할 것인가?
        - HTTP, FTP 등이 있다.

# 용어
- MTU(Maximum Transmission Unit)
    - 최대로 전송할 수 있는 바이트 수

# 요약
- IP는 홉 바이 홉 통신으로 목적지를 찾아간다.
- IP 헤더
    - Version : IP의 버전
    - Fragment Offset : 단편화된 IP 데이터그램의 번호
    - TTL(Time to Live) : 거쳐갈 수 있는 홉의 수
    - Destination IP Address : 수신지 IP 주소
    - Source IP Address : 송신지 IP 주소
- IP 주소
    - 네트워크 ID + 호스트 ID
    - 서브넷마스크(Subnet Mask)를 이용해서 네트워크 ID와 호스트 ID를 구분한다.
    - 일반적으로 DHCP(Dynamic Host Configuration Protocol)을 사용해 자동으로 할당 받는다.
- NAT(Network Address Translation)
    - Private IP와 Public IP 사이를 변환한다.
    - 마치 호스트를 프로세스처럼 여겨서 포트 포워딩(Port Forwading)으로 LAN와 WAN 사이의 통신을 가능하게 한다.



25.05.01
근로자의 날 연휴



25.05.02
학원 휴강일


