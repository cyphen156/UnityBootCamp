25.05.12
Team Project
#1 Lecture
RPC                 ::  Remote Procedure Call 원격 프로시저
                        일시적인 짬통

Network Variables   ::  네트워크 변수
                        지속적으로 사용될 예정인 것들


#2 Lecture
팀장 해야 할 일
    - 마일스톤 생성
        - 담당자는 2명
    - 하루를 넘어가는 이슈 생성 금지
        - 1 ~ 4시간 내로 끝낼 수 있게 세분화
        - 최대한 충돌이 일어나지 않도록 작업 분배
    - 칸반 보드 관리
    - 레포지토리 관리
        - PR 반영
    - Done은 Mrege할 때 팀장이 옮긴다. 
    - Communication
        - 구체적으로 할 일 지시하기
        - 상대방의 입장에서 설명하기
        - 상대방은 항상 모른다고 가정하기

팀원 해야 할 일
    - 칸반 보드 관리
        - BackLog에서 오늘 해야 할 일을 Ready로 옮기기
        - 지금 하고 있는 일은 Ready -> In Progress
        - 작업이 끝나면 In Review로 옮긴다. 
    - 레포지토리  관리
        - 이슈에서 브랜치 발행 후 작업하기
        - PR 구체적으로 작성하기
        - Convetntional Commit 적용하기
        - https://www.conventionalcommits.org/en/v1.0.0/
    - 커뮤니케이션 
        - 이해 안되면 물어보기
        - 상대방의 입장에서 설명하기
        - 상대방이 알고 있다고 가정하지 않기


25.05.13
Team Project
#1 Lecture


25.05.14
Team Project
#1 Lecture


25.05.15
Team Project
#1 Lecture
메모리 관련 오류
- Mem Leak
- double free
- using mem Free

메모리 최적화 기법
GC
Managed Language 
세대별 GC
0세대 : 최상위 계층
메모리 해제시 추적 방식을 사용한다.
-> 참조타입의 객체를 할당 연속적으로
미리 시스템으로부터 할당받음
85kb이상의 참조 객체는 2세대에 할당

승격 :: GC를 수행했는데 살아남은 친구들은 다음 세대 0-> 1로 승격
해제 가능성이 0세대보다 작기 때문에
--> 더 오래 사용할 가능성이 높은 친구들이기 때문에

GC 
메모리 할당
0세대 front부터 순차 할당 
--> 더 이상 할당할 공간이 없을 때 메모리 해제 체크
----> 승격 시스템

메모리 해제
참조 메모리 할당을 요청받았는데 더 이상 0세대에 할당할 공간이 없을 때

Unity에서의 GC
Boehm의 GC
-> Mark & Swap 방식을 통해 사용
-> 세대가 없다.
==> 압축이 없어서 파편화가 진행될 가능성이 있다.
====> OS에게 할당 요청을 많이 할 가능성이 높아진다. 

25.05.16
Team Project
#1 Lecture