25.03.24
C# Basic

#1 Lecture
저번주에 했던 내용 회상하기
블락킹 API Base Sync TCP/IP NetWroking

바이트 오더, 비트 단위 정확하게 인지하고 사용하기

#2 Lecture      ==      멀티 스레딩 히스토리
여러명하고 동시에 통신하고 싶다.....
멀티 프로세스   :   프로그램 여러개 돌리기 == 1:1 통신을 여러개의 프로그램이 함
공유 메모리가 없어서 프로세스끼리 서로 통신하지 않는 이상 간섭하지 못함
IPC 탄생 ------- Linux 
근데... 메모리를 너무 많이 먹네?
태스크 단위로 쪼개서 실행해볼까.....?
멀티 스레딩의 탄생

멀티플렉싱 기법     :       하나의 소켓 여러 커넥션, MUX
폴링    :   주기적으로 점검한다. (Observer) --> Select API 가장 오래된 API :: 어디서든 사용가능 플랫폼 독립적
클라이언트는 사용하면 할게 많아서 렉걸린다

현재 통신은 사설망끼리 통신, 서로 다른 사설망끼리 통신하고 싶다면 공인 IP를 알아내서 포트번호 찍고 들어가야함
--> 그런데 이거는 기본적으로 라우터가 막고있음
--> 사설망 -> 공인망 -> 사설망 접속 허용작업 필요
""포트포워딩""
그래서 PalWorld에서 데디케이트 서버를 개인이 열 때 포트포워딩을 통해 서버를 오픈하는 작업이 필요한 것 이었음

#3 Lecture
멀티 스레딩
태스크 단위로 사용
->      만약 공유 자원을 서로 가져다가 쓸 경우? 
-->     Race Condition 발생
--->    동기화
---->   기본 베이직 : 은행원 알고리즘
        =>      성능저하

공유 영역 작업은 원자성을 지켜야 한다...
Caused by OS Process Scheduler
메모리에 적용된 코드는 모두 binary 기계어
--> Assembly어로 해석해도 a++와 같은 한줄 코드가 3줄로 늘어남
--> 기계어는 더 늘어남
==> OS가 한줄 단위로 실행하다가 스케쥴러에 의해 중간에 Context Swithcing 발생
--> 원자성 못지킴 
volatile    =   메모리에서 항상 최신 값을 읽어옴 != register

#4 데드락
교착 상태
/////spinLock, InterLock 학습하기/////

TCP 버퍼에서 Send와 Recv는 같이 써도 상관없다

Why??
==> OS가 이미 분리해 놨다.
다만 문제가 되는건 Send / Recv를 동시에 여러번 했을 때
--> 저번주에 실험해봤다. 하나로 합쳐져서 버퍼에서 통째로 가져온다.
----> 슬라이스 해서 인덱스 잘 찾아서 써야 한다.

서버에서 멀티쓰레드를 사용했을 때 예상되는 대표적인 문제
커넥션마다 쓰레드를 생성해서 버퍼를 통해 데이터를 전송
=>?  컨텍스트 스위칭 되면 버퍼에 이전 사람의 데이터가 남아서 합쳐져서 전송되는 문제가 발생가능 
==>? 송/수신 버퍼가 여러개인것은 아니니까!

해결방법?
 <==> 
커넥션당 송/수신 OS 버퍼 생성 요청
==> 컨텍스트마다 버퍼가 생성되면 메모리 소모 예상된다
or 
송/수신시 락을 통해 송/수신 완료 후 버퍼 초기화 까지 실행을 보장해야 한다

주말 과제 멀티 스레드 서버 만들기
스레드 10개, 폴링 10개 
총 100명의 클라이언트 감당서버


스레드 동기화 문제 안생기는지 확인 할 때 검색 키워드    
C# list ThreadSafe
꼭 확인해보기
없는 내용이라면 멀티스레딩 할때 락 반드시 걸기

25.03.25
C# Basic
#1 Lecture
유니테스크는 멀티 스레드를 위한 함수가 아니고 비동기화와 코루틴 비동기 대체를 위해 만든것이다.
코루틴이 내 할거 하고 다른거 처리하라고 양보하는거라고 한다면 
유니테스크는 말 그대로 비동기 내 할일이 다 끝나면 알려줘서 다음 작업을 할 수 있도록 허용하는것것

#2 Lecture
DBMS
스케일 업 / 아웃        :       컴퓨터 사양을 올린다 / DB를 하나 더 산다
show databases;
use mysql
where like "%Korea" / "Korea%"
sql 테이블에서 varchar or char 의 차이는
빈 공간 공백을 채우느냐 안채우고 사이즈 다운하느냐

주의해야 하는 쿼리문 Update, delete, set

마지막 팁 유니티에서 스레드 쓸때 게임오브젝트 쓰지마라
리스트 미리 뽑아놓고 거기에서 찾아라
25.03.26
Unity6 Deep
#1 Lecture


25.03.27
Unity6 Deep
#1 Lecture



25.03.28
Unity6 Deep
#1 Lecture


번외
// AppsPlyer, 렌더링 파이프라인좀 외워라