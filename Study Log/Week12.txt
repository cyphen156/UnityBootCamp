25.04.07
Data Structure / Algorithms
#1 Lecture
지난주 리뷰
컴퓨터의 3요소 - 연산장치, 저장장치, 입출력장치
메모리 구조
하드웨어 구조
CPU				Memory	Stoarge
레지스터 - 캐시(L1 - L2 + L3) - (DDRAM/SDDR) - SSD / HARD Disk

논리적인 구조 (RAM - Memory)
Code - Data - Haep - Stack

메모리에 저장할 수 있는 데이터는 오직 0과 1
하지만 해석하는 방법에 따라 어떠한 자료던지 표현 가능하다.

TASK        :       운영체제 입장에서 작업을 관리하는 단위
프로세스    :       런타임 중인 프로그램
스레드      :       프로세스 내부에서 독립적으로 수행되는 실행 단위

#2 Lecture 
시간 복잡도
이론적인 시간 복잡도 상에서는 덧셈 연산과 곱셈 연산을 모두 한번의 연산으로 가정한다. 
때문에 다음과 같은 아주 쉬운 연산에도 시간복잡도가 달라진다. 
int sum = 0;
sum = N * N;
==> 대입 연산은 2번, 곱셈 연산 1번

int sum2 = 0;
for (int i = 0; i < N; ++i)
{
    sum2 += N;
}
대입 연산 N+1번, 덧셈 연산 N번


But CPU관점에서 바라보도록 하자
====> 곱셈 연산은 자동으로 반복 덧셈 연산으로 작업한다.
====> N * N ========> N + N + ... + N;
시간 복잡도는 다르지만 실제 연산 작업량 자체는 동일할 것이다.

시간 복잡도는 O(1)이라는 상수 횟수 보다 작은 연산 속도 증가량을 그래프로 나타내는 구간이 존재한다. 
하지만 절대로 상수 시간보다 시간복잡도가 좋아질 수는 없다. 
상수시간은 입력과 관계 없이 고정 출력을 갖기 떄문이다. 
근데 그 고정 연산량이 100번이고, NLogN의 시간복잡도를 갖는 함수가 30번만에 연산을 마칠 수 있다면??

무의미한 가정이다. 
시간 복잡도는는 연산 증가량을 의미하는 것이지 연산 타임을 실제로 계산하는 것에 중심을 두고 있는 것이 아니기 때문


25.04.08
Data Structure / Algorithms
#1 Lecture
Search
LinearSearch
LinearList.Find()   /   Contains()


B-Search
정렬되어있다고 가정한다. 크기 비교를 통해 반씩 토막내어 검색하기 때문에 ==> Tree
검색 범위를 데이터로 표현한다???????

LowerBound()    //   크거나 같은 첫 요소
UpperBound()    //   큰 요소 첫

25.04.09
Unity6 Deep
#1 Lecture


25.04.10
Unity6 Deep
#1 Lecture
만약 내 게임이 해킹당했다면? 
핵을 전면 수용한다 -> 창작 모드 요소로 만들어버린다. 
해커를 고용한다
사이퍼즈 낙궁




25.04.11
Unity6 Deep
#1 Lecture


