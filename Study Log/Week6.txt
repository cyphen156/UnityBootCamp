25.02.24
C# Basic
#1 Lecture
Bit 연산    //  Unity Layer Mask에 사용한다, 물리 엔진의 그룹에도 사용한다.
--> 카메라에 비트마스크를 적용하면 제외되는 레이어를 빼면 어딘가에 걸릴것이니
연산속도가 획기적 
// 그래서 단어 사용도 Masking // 암막 커튼처럼 가려서 찾는다
bit shift 연산 무슨짓을 해도 이진 곱셈 연산이 단 1번만에 끝난다. 
<<  :   L-Shift (X2)
>>  :   R-Shift (/2)
&   :   Bit And
|   :   Bit Or
~   :   Not
^   :   Exclusive OR

****    번외   ****
GameObject.Tag == Hashing 된 숫자값을 통해 비교연산
==> 문자열 비교가 아니다.

변수 다양하게 넣어보기
0x  :   16진수
0b  :   2진수


#2 Lecture
BitArray32 (uint) Layer 간단하게 만들어보기
비트마스킹 Continue;
On/Off 함수 // 특정 위치의 비트에 할당하거나 해제하는 함수
void On(int param)
{
    if (param > 0 && param <= 32)
    {
        data = data | (uint)(1 << (param - 1));
    }
}

void Off(int param)
{
    data = data & ~(uint)(1 << (param - 1));
}

*/*/**오른손 법칙**/*/* -- > 찾아보기

bool Check(int other)
{
    return (data & other) > 0 ? true : false;
}

오전수업 요약 : 비트연산자의 강력함을 느껴봐라 with KaKao/Nexon

Extra :: 삼각 함수에 대한 기본지식 = 단위 원에 내접하는 직각 삼각형과 각 세타
다큐프라임 :: 문명과 수학

#3 Lecture
2D Renderer Engine
2D Engine Plus
렌더링 우선순위 제작 
기존에는 반복문을 통한 레이어 마스킹 레이어 갯수만큼 반복횟수 증가
-> 소팅 또는 레이어별 오브젝트 리스트 추가하기

선택 정렬, 버블 정렬

충돌 처리 관련 해결책
// 내가 생각한 해결책 --> 이동해보고 충돌하면 롤백 리턴

강사님이 제시한 해결책 --> 미리 체크하고 충돌안했으면 실행
비슷하지만 다른 방법

#4 Lecture
File IO
Core/FileManager.cs 
Data/level01.map
BubbleSort

예외처리

25.02.25
C# Basic
2D Engine #4

#1 Lecture
Dynamic List 복습
DataStructure/DynamicArray.cs
자료구조 
 - 여러가지 트리들
 레드 블랙 트리, AVL 트리, Left Hand 트리 .....

해싱 기본
MD5 / 키 해싱 

try - catch - finally
{
    file IO, NetWork 할때만 쓰기
}

#2 Lecture
foreach :: 범위 기반 반복문
--> 사용하려면 GetEnumerator 가 필요하다

다중상속 : 추상클래스 부터 시작 - 인터페이스 --> 함수 강제 구현

iterator -> IEnumerator
Yield Return의 진정한 의미 :: 함수 호출중 중간에 리턴하지만 실행되고 있던 위치를 기억해 다음 호출때 그 자리에서부터 다시 시작
--> 쓰레드의 컨텍스트 스위칭
어디다가 써먹을까...? --> 다이나믹 펑션 -> 이전 실행되던 데이터가 정적 변수로 넘기지 않고 함수 채로 들고있을 수 있다.

#3 Lecture
2D Renedering Engine #4 
Input 없어도 자동 렌더링
DoubleBuffering

가장 베이직 한 실험
world.Render();
Console.WriteLine("*****************************\r\n+++++++++++++++++++++\r\n-------------------------*****************************\r\n+++++++++++++++++++++\r\n-------------------------*****************************\r\n+++++++++++++++++++++\r\n-------------------------*****************************\r\n+++++++++++++++++++++\r\n-------------------------*****************************\r\n+++++++++++++++++++++\r\n-------------------------*****************************\r\n+++++++++++++++++++++\r\n-------------------------*****************************\r\n+++++++++++++++++++++\r\n-------------------------*****************************\r\n+++++++++++++++++++++\r\n-------------------------*****************************\r\n+++++++++++++++++++++\r\n-------------------------*****************************\r\n+++++++++++++++++++++\r\n-------------------------*****************************\r\n+++++++++++++++++++++\r\n-------------------------");

예상 대로라면 Console.WriteLine();은 메모리에 있는 내용을 한번에 그리기 때문에
버퍼링 발생 안할 것임

-> 실험 결과 한번에 출력됨 

--> 더블버퍼링의 핵심 !! 메모리에 써놓고 한번에 그리면 된다...!

콘솔 로그에 관한 고찰....
콘솔 로그는 버퍼를 거치지 않고 그냥 냅다 출력한다. 
이게 뭐가 문제가 되냐면 현재의 2D렌더링 엔진은 고정사이즈 배열을 통해 출력 위치를 제어하고 있는데
콘솔 로그는 일단 냅따 출력하고 현재 커서가 존재하는 위치에서 부터 다시 출력을 시작한다.
->
출력 예시가 다음과 같이 진행된다.
세번의 렌더링 과정을 보여주겠다.
커서의 위치는 0로 표현하겠다.
첫번째 업데이트 
->
업데이트 실행중
바닥임
업데이트 실행완룡ㅇㅇㅇㅇㅇㅇㅇ0<-커서위치치

첫번째 렌더링
**********
*P       *
*        *
*        *
*        *
*   M    *
*        *
*        *
*       G*
**********
렌더링시 커서의 위치를 강제로 변경하고 있기 때문에 
이 두개의 문장이 합쳐져서 최종적으로 다음과 같이 출력되어야 한다.
**********행중
*P       *
*        *행완룡ㅇㅇㅇㅇㅇㅇㅇ
*        *
*        *
*   M    *
*        *
*        *
*       G*
**********

그런데 실제로 출력된것은 다음과 같다.
**********
*P       *
*        *
*        *
*        *
*   M    *
*        *
*        *
*       G*
**********
업데이트 실행중
바닥임
업데이트 실행완룡ㅇㅇㅇㅇㅇㅇㅇ

뭔가 이상하다 놓친것이 있는것 같다. 실험을 위해 두번째 렌더링을 해보자.
두번째 업데이트 시점에 콘솔의 커서는 다음 위치에 존재한다.
**********
*P0<-커서위치
그래서 업데이트 실행 후 다음과 같이 출력되어야 한다.

**********
*P업데이트 실행중
바닥임   *
업데이트 실행완룡ㅇㅇㅇㅇㅇㅇㅇ
*        *
*   M    *
*        *
*        *
*       G*
**********

그리고 나서 렌더링시 
커서를 이동하면서 덮어씌우고 있기 때문에 출력이 다음과 같이 예상된다
**********
*P       *실행중
*        *
*        *행완룡ㅇㅇㅇㅇㅇㅇㅇ
*        *
*   M    *
*        *
*        *
*       G*
**********

그런데 실제로 출력된 것은 다음과 같다.
**********
*P       *
*        *
*        *
*        *
*   M    *
*        *
*        *
*       G*
**********업데이트 실행중
바닥임트 실행중
업데이트 실행완룡ㅇㅇㅇㅇㅇㅇㅇ
업데이트 실행완룡ㅇㅇㅇㅇㅇㅇㅇ
?????????????????????????????????
이게 무엇을 의미하는가 하면 
커서의 위치를 옮겨서 실제로 덮어씌우는가? 라고 하면 아니오 라는것이다. 
실제로는 밀어내면서 해당 위치에 출력이 Insert되고 있다는 것을 의미한다
그런데 왜 버퍼에 쓰는 작업도 동일하게 커서를 옮기고, 
출력하는 작업을 동일하게 하는데 왜 덮어씌우고 있을까?
그것은 단순히 커서를 옮기는 것이 아니라 옮긴 후에 덮어씌우라는 명령이 있는 
Console.Write()라는 함수를 호출해서 사용했기 때문이었다.

그렇다면 추가로 해볼 수 있는 실험 
실제로 CWL과 CW는 다른방식인가?
간단한 예제다. 
내 생각이 맞다면
이 코드는 다음과 같이 출력될 것이다.
Console.WriteLine("콘솔라인출력하기");          
Console.SetCursorPosition(0, 0);
Console.WriteLine("CWL");

"CWL"
"콘솔라인출력하기"

놀랍게도 아니다.
실제 출력은 
"CWL 라인출력하기"

CWL은 출력 문자와 한 칸의 공백 문자만큼 덮어씌운다.

그렇다면 CW는 또한 동일하게 작동하는가?

Console.WriteLine("콘솔라인출력하기");
Console.SetCursorPosition(0, 0);
Console.Write("CW");

출력 예상은 
"CW 라인출력하기"

출력 결과는 
"CW  라인출력하기"

예상과 다르다 두칸의 공백이 생겼다.


그렇다면 두 칸 옮겨서 동작하게 해보면 어떨까?
Console.WriteLine("콘솔라인출력하기");
Console.SetCursorPosition(2, 0);
Console.WriteLine("CW");

예상되는 출력은 
콘솔CW  하기

결과는 
콘CW라인출력하기
여기서 알 수 있는 것은 CW는 영어 문자라서 1바이트 캐릭터이고, 
한글 출력은 2바이트 문자열이라서 두 칸을 공유하여 사용한다는 것이다.
그래서 콘솔 CW가 아니라 콘CW라는 출력이 생긴 것이다.

이것이 의미하는 바는 CMD창에서의 포지션 값이 실제로는 메모리 어딘가의 주소라는 것이고, 
SetCursorPosition()은 해당 메모리에 가서 덮어씌우라는 소리가 된다. 


그렇다면 다시 의문점이 생긴다. 두번째 실험인 CW로 바꾸는 과정에서 왜 4칸이 비워졌을까?


위 실험에 대한 GPT의 답변은 다음과 같다. 
윈도우 콘솔의 한글 처리 방식

윈도우 콘솔(cmd, Powershell, Windows Terminal 등)은 기본적으로 한글을 고정 너비(2칸) 문자로 처리.
즉, "한" 하나가 2칸을 차지하고 "글"도 2칸을 차지.
하지만 Console.Write()는 기본적으로 1바이트 문자 기준으로 덮어쓰기를 수행.
"CW"는 1바이트 문자이므로 한글 2칸을 덮어씌우지 못한다.

"C"는 "한"의 첫 번째 바이트를 덮어쓰고,
"W"는 "한"의 두 번째 바이트를 덮어쓰지만, 출력 후 자동으로 한 칸 이동(기본적인 콘솔 동작).
하지만 기존 한글 2바이트 크기 때문에 커서 이동 후 한 칸이 비워짐.
두 번째 한글 문자도 기존과의 불일치로 인해 공백이 추가됨.

한글이 원래 2칸을 차지했는데, 영어(1칸)로 덮어쓰면서 공백이 생기는 구조.
윈도우 콘솔 버퍼 자체가 한글을 고정 너비(2칸)로 취급하며 발생하는 문제.

한글이 2칸을 차지하다가 영어(1칸)가 들어오면 공백을 남기고 커서가 이동.

그런데 윈도우의 콘솔은 커서 이동 후 자동으로 한칸을 이동하는 특성이 있다고 한다.
그래서 0110이라는 위치를 갖기 때문에 CW실험에서 콘(11)솔(11)
-> " CW "라는 출력이 생겼나보다.

좀 더 자세한 실험은 C++로 메모리를 까보면서 해야 하겟지만 나중에 생각나면 다시해봐야겠다.

결국 콘솔 로그의 밀림 현상에 대한것은 해결하지 못했다.

25.02.26
Unity6 Basic
#1 Lecture
3Dto2DShooting Game
기본 설정
**********************************
* 카메라                          *
* - projection - orthographic    *
* - env - solid color            *
*                                *
* Window - Render - Lighting     *
* - Env lighting = color         *
* - ambient Color 255, 255, 255  *
**********************************

PlayerMove.cs   // 플레이어 이동 처리

Cube    ==  Player
물체의 이동 공식
등속운동과 등 가속도
P = P0 + vt(속도 * 시간)
V = v0 + at
힘 = 질량 * 가속
F = ma

25.02.27
Unity6 Basic
#1 Lecture
불릿 프리펩에 오디오 추가하기

25.02.28
Unity6 Basic
#1 Lecture
