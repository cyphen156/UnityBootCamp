25.03.31
전반기 작계 훈련 참여로 인한 결석
최선문 강사님

25.04.01
Data Structure / Algorithms
#1 Lecture
GPGPU를 통한 실수 연산

비트에 저장할 수 있는 것 = 수  ???  Thats No no ⇒ Only O / X
But 어떤 것에 대한 O/X냐를 해석하는 방법에 따라 달라짐
⇒ Boolean ⇒ 예약어를 통한 확장

Little Endian
빅 엔디안과 리틀 엔디안의 가장 큰 차이는 데이터를 어떤 방향에서 읽어오느냐 인데, 
이 방식의 차이가 데이터를 처리하는 연산속도에 영향을 준다.
why??
cpu의 본질이 전 가산기인 것을 생각한다면 이해할 수 있다. 
덧셈 연산을 수행할 때 한번에 한 자리씩 밖에 연산하지 못한다. 
==> 비트 단위 연산을 의미한다.
한번의 연산 종료 후에는 올림수가 발생하여 다음 연산에 영향을 준다.

그런데 만약 Big Endian 방식에서는 우선 가져온 데이터를 뒤집어서 생각해야한다.
일단 가져오고, 덧셈 연산을 위해 순서를 재정렬 해야 한다는 소리다. 이것이 데이터가 커질수록 추가적인 뒤집기 연산이 추가로 발생한다.
인간은 느끼지 못할 정도로 빠르지만 컴퓨터에게는 엄청난 차이가 생기기 때문


#2 Lecture
만약 다음과 같은 코드가 있다고 생각해보자
str1과 str2의 주소는 서로 다르지만 값은 같은 것을 가리키고 있다. 
그리고 이 문자열 "Hello"는 메모리 최적화를 위해 컴파일러가 변수 str1과 str2를 얕은 복사를 통해 값 참조하도록 만든다.
이러한 기능이 가능한 이유는 C#에서는 모두 오브젝트에서 파생되는 클래스 형식이기 때문이다.
이것이 왜 궁금해졋냐? 는 강사님이 설명하면서 얕은 복사라고 알려주면서 str2를 삭제해버렸기 때문인데
실제로 컴파일러가 변수가 선언만 하고 사용되지 않는 경우는 코드를 지워서 최적화 하지만, 얕은 복사라는 이유만으로  
변수를 지우지는 않는다.
그렇기 때문에 이에 대해 문의 했고, 강사님이 집중한 것은 변수 자체에 할당되는 값이 같다. 라는 것에 집중한 것이었고, 
내가 집중한 것은 변수 주소 자체는 다르지만 변수에 할당된 값은 같다. 라는 차이가 생겼다.


#3 Lecture 
동적계획법이란
이미 연산된 데이터를 저장해서 끌고와 쓰고 싶다....
==> 추가 공간을 더 쓰자. 대신 함수 호출횟수를 줄인다.
연산 시간이 줄 수도 있고 아닐 수도 있다.
==> 함수 호출 전체 메모리 사용량은 늘어난다. 항상
why? 새로 호출할땐 스택에 넣어 놓고 리턴시 파괴되니까 메모리 사용이 항상 호출 스택만큼 같음
그래서 맨 처음 추가 로직으로 데이터 저장소에 값이 저장되었는지 확인하는 로직 필요

25.04.02
Unity6 Deep
#1 Lecture
2D 할 때 애니메이션 피벗 무조건 맞춰줘야 한다. 
트랜스폼에 직접적으로 연관되어 있기 때문에


25.04.03
Unity6 Deep
#1 Lecture



25.04.04
Unity6 Deep
#1 Lecture


